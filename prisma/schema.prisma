generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}



/* ────────────── USER  (stable baseline) ────────────── */
model User {
  id                 String   @id @default(uuid())
  email              String   @unique
  name               String?
  tonePreference     String?     // gentle | blunt | philosophical | funny
  baselineMotivation String?     // self-respect | freedom | …
  reflectionDepth    Int?        // 1-5
  slipFraming        String?     // shame vs feedback
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  habit        Habit[]            // single active habit
  reflections  UserReflection[]
  events       HabitEvent[]
}

/* ────────────── HABIT  (context overlay) ────────────── */
model Habit {
  id                      String   @id @default(uuid())
  userId                  String
  name                    String
  goalType                String?      // reduce | eliminate
  microGoal               String?
  triggers                String[]     // evenings, loneliness …
  cravingNarrative        String?
  resistanceStyle         String?
  motivationOverride      String?
  reflectionDepthOverride Int?
  hitDefinition           String?
  slipDefinition          String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  user          User @relation(fields: [userId], references: [id])
  events        HabitEvent[]
}

/* ────────────── EVENT LOG ────────────── */
model HabitEvent {
  id             String   @id @default(uuid())
  habitId        String
  userId         String
  type           String               // HIT | SLIP
  timestamp      DateTime @default(now())
  mood           String?
  intensity      Int?
  reflectionNote String?
  emotionTags    String[]
  aiPromptUsed   String?
  isReversal     Boolean?
  habit          Habit @relation(fields: [habitId], references: [id])
  user           User  @relation(fields: [userId], references: [id])
}

/* Optional memory + quotes */
model UserReflection {
  id        String   @id @default(uuid())
  userId    String
  message   String
  source    String           // user | ai
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}
